/*
 * Nudr_DataRepository API OpenAPI file
 *
 * Unified Data Repository Service
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package DataRepository_test

import (
	"context"
	"github.com/davecgh/go-spew/spew"
	"free5gc/src/udr/logger"
	"net/http"
	"testing"

	"github.com/google/go-cmp/cmp"
	"go.mongodb.org/mongo-driver/bson"
	"free5gc/lib/Nudr_DataRepository"
	"free5gc/lib/openapi/models"
)

// GetSharedData - retrieve shared data
func TestGetSharedData(t *testing.T) {
	runTestServer(t)

	connectMongoDB(t)

	// Drop old data
	collection := Client.Database("free5gc").Collection("subscriptionData.sharedData")
	collection.DeleteOne(context.TODO(), bson.M{"sharedDataId": "1"})
	collection.DeleteOne(context.TODO(), bson.M{"sharedDataId": "2"})

	// Set client and set url
	client := setTestClient(t)

	// Set test data
	var testDataArray []models.SharedData
	{
		testData := models.SharedData{
			SharedDataId: "1",
		}
		insertTestData := toBsonM(testData)
		insertTestData["sharedDataId"] = "1"
		collection.InsertOne(context.TODO(), insertTestData)
		testDataArray = append(testDataArray, testData)
	}
	{
		testData := models.SharedData{
			SharedDataId: "2",
		}
		insertTestData := toBsonM(testData)
		insertTestData["sharedDataId"] = "2"
		collection.InsertOne(context.TODO(), insertTestData)
		testDataArray = append(testDataArray, testData)
	}

	{
		// Check test data (Use RESTful GET)
		var getSharedDataParamOpts Nudr_DataRepository.GetSharedDataParamOpts
		sharedDataIds := []string{"1", "2"}
		sharedDataArray, res, err := client.RetrievalOfSharedDataApi.GetSharedData(context.TODO(), sharedDataIds, &getSharedDataParamOpts)
		if err != nil {
			logger.AppLog.Panic(err)
		}

		spew.Dump(sharedDataArray)

		if status := res.StatusCode; status != http.StatusOK {
			t.Errorf("handler returned wrong status code: got %v want %v",
				status, http.StatusOK)
		}

		if cmp.Equal(testDataArray, sharedDataArray, Opt) != true {
			t.Errorf("handler returned unexpected body: got %v want %v",
				sharedDataArray, testDataArray)
		}
	}

	// Clean test data
	collection.DeleteOne(context.TODO(), bson.M{"sharedDataId": "1"})
	collection.DeleteOne(context.TODO(), bson.M{"sharedDataId": "2"})

	// TEST END
}
