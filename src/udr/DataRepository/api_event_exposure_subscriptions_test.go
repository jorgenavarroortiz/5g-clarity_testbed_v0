/*
 * Nudr_DataRepository API OpenAPI file
 *
 * Unified Data Repository Service
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package DataRepository_test

import (
	"context"
	"github.com/antihax/optional"
	"github.com/davecgh/go-spew/spew"
	"free5gc/lib/Nudr_DataRepository"
	"free5gc/lib/openapi/models"
	"net/http"
	"strings"
	"testing"
)

// EeSubscriptions - Create, Query Update and Remove
func TestCreateQueryUpdateRemoveEeSubscriptions(t *testing.T) {
	runTestServer(t)

	// Set client and set url
	client := setTestClient(t)

	var eeSubscription = models.EeSubscription{
		CallbackReference: "http://127.0.0.1/callback",
		MonitoringConfigurations: map[string]models.MonitoringConfiguration{
			"123": {
				EventType: models.EventType_LOSS_OF_CONNECTIVITY,
			},
		},
	}

	ueId := "imsi-208930123456789"
	var subsUri string
	var subsId string
	_ = subsId

	// Create eeSubscription
	{
		_, res, err := client.EventExposureSubscriptionsCollectionApi.CreateEeSubscriptions(context.TODO(), ueId, eeSubscription)
		if err != nil {
			t.Fatalf(err.Error())
		}

		if status := res.StatusCode; status != http.StatusCreated {
			t.Errorf("handler returned wrong status code: got %v want %v",
				status, http.StatusCreated)
		}

		subsUri = res.Header.Get("Location")
		spew.Printf("[subsUri_Header_Location] %s\n", subsUri)
		subsId = subsUri[strings.LastIndex(subsUri, "/")+1:]
		spew.Printf("[subsId] %s\n", subsId)
	}

	var eeSubscriptionUpdate = models.EeSubscription{
		CallbackReference: "http://127.0.0.1/callback",
		MonitoringConfigurations: map[string]models.MonitoringConfiguration{
			"321": {
				EventType: models.EventType_LOSS_OF_CONNECTIVITY,
			},
		},
	}

	// Query eeSubscription
	{
		eeSubscriptionArray, res, err := client.EventExposureSubscriptionsCollectionApi.Queryeesubscriptions(context.TODO(), ueId, &Nudr_DataRepository.QueryeesubscriptionsParamOpts{})
		if err != nil {
			t.Fatalf(err.Error())
		}

		if status := res.StatusCode; status != http.StatusOK {
			t.Errorf("handler returned wrong status code: got %v want %v",
				status, http.StatusOK)
		}
		spew.Dump(eeSubscriptionArray)
	}

	// Update eeSubscription
	{
		res, err := client.EventExposureSubscriptionDocumentApi.UpdateEesubscriptions(context.TODO(), ueId, subsId, &Nudr_DataRepository.UpdateEesubscriptionsParamOpts{
			EeSubscription: optional.NewInterface(eeSubscriptionUpdate),
		})
		if err != nil {
			t.Fatalf(err.Error())
		}

		if status := res.StatusCode; status != http.StatusNoContent {
			t.Errorf("handler returned wrong status code: got %v want %v",
				status, http.StatusOK)
		}
	}

	// Query eeSubscription
	{
		eeSubscriptionArray, res, err := client.EventExposureSubscriptionsCollectionApi.Queryeesubscriptions(context.TODO(), ueId, &Nudr_DataRepository.QueryeesubscriptionsParamOpts{})
		if err != nil {
			t.Fatalf(err.Error())
		}

		if status := res.StatusCode; status != http.StatusOK {
			t.Errorf("handler returned wrong status code: got %v want %v",
				status, http.StatusOK)
		}
		spew.Dump(eeSubscriptionArray)
	}

	// Delete sdmSubscriptions
	{
		res, err := client.EventExposureSubscriptionDocumentApi.RemoveeeSubscriptions(context.TODO(), ueId, subsId)
		if err != nil {
			t.Fatalf(err.Error())
		}

		if status := res.StatusCode; status != http.StatusNoContent {
			t.Errorf("handler returned wrong status code: got %v want %v",
				status, http.StatusNoContent)
		}
	}

	// Query eeSubscription
	{
		eeSubscriptionArray, res, err := client.EventExposureSubscriptionsCollectionApi.Queryeesubscriptions(context.TODO(), ueId, &Nudr_DataRepository.QueryeesubscriptionsParamOpts{})
		if err != nil {
			t.Fatalf(err.Error())
		}

		if status := res.StatusCode; status != http.StatusOK {
			t.Errorf("handler returned wrong status code: got %v want %v",
				status, http.StatusOK)
		}
		spew.Dump(eeSubscriptionArray)
	}

}
