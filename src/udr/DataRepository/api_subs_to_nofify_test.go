/*
 * Nudr_DataRepository API OpenAPI file
 *
 * Unified Data Repository Service
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package DataRepository_test

import (
	"context"
	"github.com/davecgh/go-spew/spew"
	"github.com/gin-gonic/gin"
	"github.com/stretchr/testify/assert"
	"free5gc/lib/http2_util"
	"free5gc/lib/openapi/models"
	"free5gc/src/udr/logger"
	"free5gc/src/udr/udr_util"
	"net/http"
	"strings"
	"testing"
	"time"
)

// SubscriptionDataSubscriptions - Subscription data subscriptions
func TestPostRemoveSubscriptionDataSubscriptions(t *testing.T) {
	runTestServer(t)

	// Set client and set url
	client := setTestClient(t)

	ueId := "imsi-0123456789"
	date := time.Now()
	duration, _ := time.ParseDuration("30m")
	date = date.Add(duration)
	dateFormat, _ := time.Parse(time.RFC3339, date.Format(time.RFC3339))

	var subscriptionDataSubscriptions = models.SubscriptionDataSubscriptions{
		CallbackReference:         "https://127.0.0.1:9999/SubscriptionDataSubscriptions",
		OriginalCallbackReference: "https://127.0.0.1:9999/OriginalCallbackReference",
		Expiry:                    &dateFormat,
		UeId:                      ueId,
	}

	var subsUri string
	var subsId string
	// Create SubscriptionDataSubscriptions
	{
		subscriptionDataSubscriptions, res, err := client.SubsToNofifyCollectionApi.PostSubscriptionDataSubscriptions(context.TODO(), subscriptionDataSubscriptions)
		if err != nil {
			t.Fatalf(err.Error())
		}

		if status := res.StatusCode; status != http.StatusCreated {
			t.Errorf("handler returned wrong status code: got %v want %v",
				status, http.StatusCreated)
		}

		subsUri = res.Header.Get("Location")
		spew.Printf("[subsUri_Header_Location] %s\n", subsUri)
		subsId = subsUri[strings.LastIndex(subsUri, "/")+1:]
		spew.Printf("[subsId] %s\n", subsId)
		spew.Dump(subscriptionDataSubscriptions)
	}

	// Delete SubscriptionDataSubscriptions
	{
		res, err := client.SubsToNotifyDocumentApi.RemovesubscriptionDataSubscriptions(context.TODO(), subsId)
		if err != nil {
			t.Fatalf(err.Error())
		}

		if status := res.StatusCode; status != http.StatusNoContent {
			t.Errorf("handler returned wrong status code: got %v want %v",
				status, http.StatusNoContent)
		}
	}
}

func TestOnDataChangeNotify(t *testing.T) {
	runTestServer(t)

	go func() { // simulate NF service consumer server
		udrLogPath := udr_util.UdrLogPath
		udrPemPath := udr_util.UdrPemPath
		udrKeyPath := udr_util.UdrKeyPath

		router := gin.Default()

		router.POST("/DataChangeNotify", func(c *gin.Context) {
			logger.HandlerLog.Infoln("== Comsumer received notifiction from UDR ==")
			var dataChangeNotify models.DataChangeNotify
			if err := c.ShouldBindJSON(&dataChangeNotify); err != nil {
				logger.HandlerLog.Panic(err.Error())
			}
			// spew.Dump(dataChangeNotify)
			c.JSON(http.StatusNoContent, nil)
		})

		server, err := http2_util.NewServer(":9999", udrLogPath, router)
		if err == nil && server != nil {
			logger.InitLog.Infoln(server.ListenAndServeTLS(udrPemPath, udrKeyPath))
			assert.True(t, err == nil)
		}
	}()
	time.Sleep(100 * time.Millisecond)

	// Set client and set url
	client := setTestClient(t)

	ueId := "imsi-0123456789"
	date := time.Now()
	duration, _ := time.ParseDuration("30m")
	date = date.Add(duration)
	dateFormat, _ := time.Parse(time.RFC3339, date.Format(time.RFC3339))

	var subscriptionDataSubscriptions = models.SubscriptionDataSubscriptions{
		CallbackReference: "https://127.0.0.1:9999/DataChangeNotify",
		Expiry:            &dateFormat,
		UeId:              ueId,
	}

	var subsUri string
	var subsId string

	// Create SubscriptionDataSubscriptions
	{
		subscriptionDataSubscriptions, res, err := client.SubsToNofifyCollectionApi.PostSubscriptionDataSubscriptions(context.TODO(), subscriptionDataSubscriptions)
		if err != nil {
			t.Fatalf(err.Error())
		}

		if status := res.StatusCode; status != http.StatusCreated {
			t.Errorf("handler returned wrong status code: got %v want %v",
				status, http.StatusCreated)
		}

		subsUri = res.Header.Get("Location")
		spew.Printf("[subsUri_Header_Location] %s\n", subsUri)
		subsId = subsUri[strings.LastIndex(subsUri, "/")+1:]
		spew.Printf("[subsId] %s\n", subsId)
		spew.Dump(subscriptionDataSubscriptions)
	}

	// Run All PATCH test function for subscription data
	TestAmfContext3gpp(t)
	TestAmfContextNon3gpp(t)
	TestModifyAuthentication(t)
	TestPatchOperSpecData(t)
	TestModifyPpData(t)
}
