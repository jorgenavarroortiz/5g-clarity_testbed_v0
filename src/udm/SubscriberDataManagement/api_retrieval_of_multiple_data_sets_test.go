/*
 * Nudm_SDM
 *
 * Nudm Subscriber Data Management Service
 *
 * API version: 2.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package SubscriberDataManagement_test

import (
	"context"
	"fmt"
	"github.com/antihax/optional"
	"github.com/gin-gonic/gin"
	"github.com/stretchr/testify/assert"
	Nudm_SDM_Client "free5gc/lib/Nudm_SubscriberDataManagement"
	"free5gc/lib/http2_util"
	"free5gc/lib/openapi/models"
	"free5gc/lib/path_util"
	Nudm_SDM_Server "free5gc/src/udm/SubscriberDataManagement"
	"free5gc/src/udm/logger"
	"free5gc/src/udm/udm_context"
	"free5gc/src/udm/udm_handler"
	"net/http"
	"testing"
)

// GetSupi - retrieve multiple data sets
func TestGetSupi(t *testing.T) {

	go func() { // udm server
		router := gin.Default()
		Nudm_SDM_Server.AddService(router)

		udmLogPath := path_util.Gofree5gcPath("free5gc/udmsslkey.log")
		udmPemPath := path_util.Gofree5gcPath("free5gc/support/TLS/udm.pem")
		udmKeyPath := path_util.Gofree5gcPath("free5gc/support/TLS/udm.key")
		server, err := http2_util.NewServer(":29503", udmLogPath, router)
		if err == nil && server != nil {
			logger.InitLog.Infoln(server.ListenAndServeTLS(udmPemPath, udmKeyPath))
			assert.True(t, err == nil)
		}
	}()

	udm_context.TestInit()
	go udm_handler.Handle()

	go func() { // fake udr server
		router := gin.Default()

		router.GET("/nudr-dr/v1/subscription-data/:ueId/:servingPlmnId/provisioned-data/am-data", func(c *gin.Context) {
			supi := c.Param("supi")
			fmt.Println("==========AM Data==========")
			fmt.Println("supi: ", supi)
			var testAccessAndMobilitySubscriptionData models.AccessAndMobilitySubscriptionData
			testAccessAndMobilitySubscriptionData.SupportedFeatures = "supportedFeatures"
			testAccessAndMobilitySubscriptionData.Gpsis = []string{"gpsi1", "gpasi2"}
			c.JSON(http.StatusOK, testAccessAndMobilitySubscriptionData)
		})

		router.GET("/nudr-dr/v1/subscription-data/:ueId/:servingPlmnId/provisioned-data/smf-selection-subscription-data", func(c *gin.Context) {
			supi := c.Param("supi")
			PlmnId := c.Param("servingPlmnId")
			fmt.Println("==========SMF selection subscription data==========")
			fmt.Println("supi: ", supi)
			fmt.Println("PlmnId: ", PlmnId)
			var testsmfSelectionSubscriptionData models.SmfSelectionSubscriptionData
			testsmfSelectionSubscriptionData.SupportedFeatures = "test_supportedFeatures"
			c.JSON(http.StatusOK, testsmfSelectionSubscriptionData)
		})

		router.GET("/nudr-dr/v1/subscription-data/:ueId/:servingPlmnId/provisioned-data/trace-data", func(c *gin.Context) {
			supi := c.Param("supi")
			fmt.Println("==========Trace data==========")
			fmt.Println("supi: ", supi)
			var testTraceData models.TraceData
			testTraceData.TraceRef = "TestDataref"
			c.JSON(http.StatusOK, testTraceData)
		})

		router.GET("/nudr-dr/v1/subscription-data/:ueId/:servingPlmnId/provisioned-data/sm-data", func(c *gin.Context) {
			supi := c.Param("supi")
			fmt.Println("==========Session management==========")
			fmt.Println("supi: ", supi)
			var testSessionManagementSubscriptionData models.SessionManagementSubscriptionData
			testSessionManagementSubscriptionData.SharedDnnConfigurationsIds = "TestSharedIDs"
			c.JSON(http.StatusOK, testSessionManagementSubscriptionData)
		})

		router.GET("/nudr-dr/v1/subscription-data/:ueId/:servingPlmnId/smf-registrations", func(c *gin.Context) {
			supi := c.Param("supi")
			fmt.Println("==========SMF REGISTRATION LIST ==========")
			fmt.Println("supi: ", supi)
			var testSmfRegList []models.SmfRegistration
			c.JSON(http.StatusOK, testSmfRegList)
		})

		udrLogPath := path_util.Gofree5gcPath("free5gc/udrsslkey.log")
		udrPemPath := path_util.Gofree5gcPath("free5gc/support/TLS/udr.pem")
		udrKeyPath := path_util.Gofree5gcPath("free5gc/support/TLS/udr.key")

		server, err := http2_util.NewServer(":29504", udrLogPath, router)
		if err == nil && server != nil {
			logger.InitLog.Infoln(server.ListenAndServeTLS(udrPemPath, udrKeyPath))
			assert.True(t, err == nil)
		}
	}()

	udm_context.Init()
	cfg := Nudm_SDM_Client.NewConfiguration()
	cfg.SetBasePath("https://localhost:29503")
	clientAPI := Nudm_SDM_Client.NewAPIClient(cfg)

	supi := "SDM1234"
	servingPlmnId := "servingPlmnId"
	datasetName := []models.DataSetName{"AM", "SMF_SEL"}
	var getParamOpts Nudm_SDM_Client.GetParamOpts
	getParamOpts.PlmnId = optional.NewInterface(servingPlmnId)
	subsDataSet, resp, err := clientAPI.RetrievalOfMultipleDataSetsApi.Get(context.Background(), supi, datasetName, &getParamOpts)
	if err != nil {
		fmt.Println(err.Error())
	} else {
		fmt.Println("resp: ", resp)
		fmt.Println("subsDataSet: ", subsDataSet)
	}
}
