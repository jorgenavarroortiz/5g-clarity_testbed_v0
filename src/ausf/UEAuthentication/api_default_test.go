/*
 * AUSF API
 *
 * OpenAPI specification for AUSF
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package UEAuthentication_test

import (
	"context"
	"encoding/base64"
	"encoding/hex"
	"flag"
	"fmt"
	"free5gc/lib/CommonConsumerTestData/AUSF/TestUEAuth"

	"github.com/antihax/optional"
	"github.com/bronze1man/radius"
	"github.com/google/gopacket"
	"github.com/google/gopacket/layers"
	"github.com/urfave/cli"

	// "free5gc/lib/CommonConsumerTestData/UDM/TestGenAuthData"
	Nausf_UEAU_Client "free5gc/lib/Nausf_UEAuthentication"
	"free5gc/lib/openapi/models"
	"free5gc/src/ausf/ausf_context"
	"free5gc/src/ausf/ausf_producer"
	"free5gc/src/ausf/ausf_service"
	"free5gc/src/nrf/nrf_service"
	"free5gc/src/udm/udm_service"
	"free5gc/src/udr/udr_service"

	// "free5gc/src/udm/udm_handler"
	"math/rand"
	"testing"
	"time"
)

// EapAuthMethod -
func TestEapAuthMethod(t *testing.T) {
	// c.JSON(http.StatusOK, gin.H{})
}

// UeAuthenticationsAuthCtxId5gAkaConfirmationPut -
func TestUeAuthenticationsAuthCtxId5gAkaConfirmationPut(t *testing.T) {
	// c.JSON(http.StatusOK, gin.H{})
}

// UeAuthenticationsPost -
func TestUeAuthenticationsPost(t *testing.T) {
	// NRF
	flag_nrf := flag.FlagSet{}
	cli_nrf := cli.NewContext(nil, &flag_nrf, nil)
	nrf := &nrf_service.NRF{}
	nrf.Initialize(cli_nrf)
	go nrf.Start()
	time.Sleep(100 * time.Millisecond)

	// AUSF
	flag_ausf := flag.FlagSet{}
	cli_ausf := cli.NewContext(nil, &flag_ausf, nil)
	ausf := &ausf_service.AUSF{}
	ausf.Initialize(cli_ausf)
	go ausf.Start()
	time.Sleep(100 * time.Millisecond)

	// UDM
	flag_udm := flag.FlagSet{}
	cli_udm := cli.NewContext(nil, &flag_udm, nil)
	udm := &udm_service.UDM{}
	udm.Initialize(cli_udm)
	go udm.Start()
	time.Sleep(100 * time.Millisecond)

	// UDR
	flag_udr := flag.FlagSet{}
	cli_udr := cli.NewContext(nil, &flag_udr, nil)
	udr := &udr_service.UDR{}
	udr.Initialize(cli_udr)
	go udr.Start()
	time.Sleep(100 * time.Millisecond)

	cfg := Nausf_UEAU_Client.NewConfiguration()
	cfg.SetBasePath("https://localhost:29509")
	client := Nausf_UEAU_Client.NewAPIClient(cfg)

	rand.Seed(time.Now().UnixNano())
	// choose one from null scheme, profileA, or profileB
	testSUCI := TestUEAuth.TEST_SUCI_PROFILE_A

	var authInfo models.AuthenticationInfo
	authInfo.SupiOrSuci = testSUCI
	authInfo.ServingNetworkName = TestUEAuth.SUCCESS_SERVING_NETWORK_NAME
	ueAuthCtx, resp, err := client.DefaultApi.UeAuthenticationsPost(context.TODO(), authInfo)
	fmt.Println("=====")
	if err != nil {
		fmt.Println("err: ", err)
	} else {
		fmt.Println("resp: ", resp)
		fmt.Println("ueAuthCtx: ", ueAuthCtx)
	}

	switch ueAuthCtx.AuthType {
	case models.AuthType__5_G_AKA:
		fmt.Println("5G AKA")

		// 5G AKA Confirmation - success case
		var confirmationData1 models.ConfirmationData
		confirmationData1.ResStar = TestUEAuth.TestUe5gAuthTable[TestUEAuth.SUCCESS_CASE].ResStar
		var ueAuthenticationsAuthCtxId5gAkaConfirmationPut1 Nausf_UEAU_Client.UeAuthenticationsAuthCtxId5gAkaConfirmationPutParamOpts
		ueAuthenticationsAuthCtxId5gAkaConfirmationPut1.ConfirmationData = optional.NewInterface(confirmationData1)
		client.DefaultApi.UeAuthenticationsAuthCtxId5gAkaConfirmationPut(context.Background(), testSUCI, &ueAuthenticationsAuthCtxId5gAkaConfirmationPut1)

		// 5G AKA Confirmation - failure case
		var confirmationData2 models.ConfirmationData
		confirmationData2.ResStar = TestUEAuth.TestUe5gAuthTable[TestUEAuth.FAILURE_CASE].ResStar
		var ueAuthenticationsAuthCtxId5gAkaConfirmationPut2 Nausf_UEAU_Client.UeAuthenticationsAuthCtxId5gAkaConfirmationPutParamOpts
		ueAuthenticationsAuthCtxId5gAkaConfirmationPut2.ConfirmationData = optional.NewInterface(confirmationData2)
		client.DefaultApi.UeAuthenticationsAuthCtxId5gAkaConfirmationPut(context.Background(), testSUCI, &ueAuthenticationsAuthCtxId5gAkaConfirmationPut2)

	case models.AuthType_EAP_AKA_PRIME:
		fmt.Println("eap aka prime")
		var eapConfirmData Nausf_UEAU_Client.EapAuthMethodParamOpts
		var eapSess models.EapSession
		eapSess.Supi = testSUCI

		respEap, _ := base64.StdEncoding.DecodeString(ueAuthCtx.Var5gAuthData.(string))
		eapGoPkt := gopacket.NewPacket(respEap, layers.LayerTypeEAP, gopacket.Default)
		eapLayer := eapGoPkt.Layer(layers.LayerTypeEAP)
		eapContent, _ := eapLayer.(*layers.EAP)

		var eapPkt radius.EapPacket
		eapPkt.Code = radius.EapCodeResponse
		eapPkt.Identifier = eapContent.Id

		var atRes, atMac string
		testSuccess := 1
		if testSuccess == 1 {
			atRes, _ = ausf_producer.EapEncodeAttribute("AT_RES", TestUEAuth.TestUeEapAuthTable[TestUEAuth.SUCCESS_CASE].Res)
		} else {
			atRes, _ = ausf_producer.EapEncodeAttribute("AT_RES", TestUEAuth.TestUeEapAuthTable[TestUEAuth.FAILURE_CASE].Res)
		}
		// calculate AT_MAC
		fmt.Println("---------------------")
		atMac, _ = ausf_producer.EapEncodeAttribute("AT_MAC", "")
		dataArrayBeforeMAC := atRes + atMac
		eapPkt.Data = []byte(dataArrayBeforeMAC)
		encodedPktBeforeMAC := eapPkt.Encode()
		K_aut := TestUEAuth.TestUeEapAuthTable[TestUEAuth.SUCCESS_CASE].K_aut
		K_autDe, _ := hex.DecodeString(K_aut)
		// fmt.Printf("test pkt with MAC val 0: %x\nkey = %x\n", encodedPktBeforeMAC, K_autDe)
		MACvalue := ausf_producer.CalculateAtMAC([]byte(K_autDe), encodedPktBeforeMAC)
		// fmt.Printf("MAC value = %x\n", MACvalue)
		atMacNum := fmt.Sprintf("%02x", ausf_context.AT_MAC_ATTRIBUTE)
		atMACfirstRow, _ := hex.DecodeString(atMacNum + "05" + "0000")
		wholeAtMAC := append(atMACfirstRow, MACvalue...)
		atMac = string(wholeAtMAC)
		dataArrayAfterMAC := atRes + atMac

		eapPkt.Data = []byte(dataArrayAfterMAC)
		encodedPktAfterMAC := eapPkt.Encode()
		eapSess.EapPayload = base64.StdEncoding.EncodeToString(encodedPktAfterMAC)
		fmt.Printf("eapSess: %x\n", encodedPktAfterMAC)
		fmt.Println("---------------------")
		eapConfirmData.EapSession = optional.NewInterface(eapSess)
		rtnSess, _, _ := client.DefaultApi.EapAuthMethod(context.Background(), testSUCI, &eapConfirmData)
		rtnDecode, _ := base64.StdEncoding.DecodeString(rtnSess.EapPayload)
		// fmt.Printf("rtnSess: %x\n", rtnDecode)

		rtnGoPkt := gopacket.NewPacket(rtnDecode, layers.LayerTypeEAP, gopacket.Default)
		rtnLayer := rtnGoPkt.Layer(layers.LayerTypeEAP)
		rtnContent, _ := rtnLayer.(*layers.EAP)
		if rtnContent.Code == layers.EAPCodeSuccess {
			fmt.Printf("EAP-AKA' success test case ended\n")
		} else { // failure
			// fmt.Printf("rtn failure with code %x\n", rtnContent.Code)
			var eapConfirmData2 Nausf_UEAU_Client.EapAuthMethodParamOpts
			var eapSess2 models.EapSession
			eapPkt2 := ausf_producer.ConstructEapNoTypePkt(radius.EapCodeResponse, rtnContent.Id)
			eapSess2.EapPayload = eapPkt2

			eapConfirmData2.EapSession = optional.NewInterface(eapSess2)
			rtnSess2, _, _ := client.DefaultApi.EapAuthMethod(context.Background(), testSUCI, &eapConfirmData2)
			rtnDecode2, _ := base64.StdEncoding.DecodeString(rtnSess2.EapPayload)
			// fmt.Printf("rtnSess2: %x\n", rtnDecode2)
			if rtnDecode2[0] == 0x04 { // failure
				fmt.Printf("EAP-AKA' failure test case ended\n")
			}
		}

	default:
		fmt.Println("ueAuthCtx authType error")
	}
}
