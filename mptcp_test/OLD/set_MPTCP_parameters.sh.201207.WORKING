#!/bin/bash
# Jorge Navarro, UGR (2020)

# This script assumes the following scenarios (please execute ./configure.sh first). Make sure that the hostname in /etc/hostname
# is a valid one: mptcpUe1, mptcpUe2, mptcpUe, free5gc or mptcpProxy
#
# Scenario 1: direct connection between two machines: mptcpUe1 <-> mptcpUe2
#   mptcpUe1 with eth0 disabled, eth1 10.1.1.1/24, eth2 10.1.1.2/24, eth3 for management
#   mptcpUe2 with eth0 disabled, eth1 10.1.1.3/24, eth2 10.1.1.4/24, eth3 for management
# NOTE: eth0 connects directly to Internet, used to install packages
#
# Scenario 2: mptcpUe <-> free5gc <-> mptcpProxy
#   mptcpUe with eth0 disabled, eth1 10.1.1.1/24, eth2 10.1.1.2/24, eth3 for management
#   free5gc with eth0 disabled, eth1 10.1.1.222/24, eth2 60.60.0.102/24, eth3 for management
#   mptcpProxy with eth0 disabled, eth1 60.60.0.101/24, eth2 for management
# NOTE: eth0 connects directly to Internet, used to install packages

#############################
# Parsing inputs parameters
#############################

usage() {
  echo "Usage: $0 -p <path manager> -s <scheduler> -c <congestion control> -g <gateway> -n <network> [-u <num_UEs>] [-f <last_byte_first_UE>] [--ns <namespace>] [-d]" 1>&2;
  echo ""
  echo "E.g. for mptcpUe:    $0 -p fullmesh -s default -c olia -g 10.1.1.222  -n 10.1.1  -u 2 -f 1";
  echo "E.g. for mptcpProxy: $0 -p fullmesh -s default -c olia -g 60.60.0.102 -n 60.60.0      -f 101"
  echo ""
  echo "       <path manager> ........... default, fullmesh, ndiffports, binder"
  echo "       <scheduler> .............. default, roundrobin, redundant"
  echo "       <congestion control> ..... reno, cubic, lia, olia, wvegas, balia, mctcpdesync"
  echo "       <gateway> ................ IP address of gateway for default route"
  echo "       <network> ................ 3 first bytes of IP addresses (SMF UE subnet (UE) or proxy subnet (proxy)"
  echo "       <num_UEs> ................ number of UEs (last byte of IP addresses from 1 to <num_UEs>)"
  echo "       <last_byte_ip_address> ... last byte of the first IP address (following IP addresses will be consecutive)"
  echo "       -m.. ..................... create namespace MPTCPns with virtual interfaces"
  echo "       -d ....................... print debug messages"
  exit 1;
}

# Default values
ns=0
LAST_BYTE_FIRST_UE=1
NUM_UES=1

while getopts ":p:s:c:g:n:u:f:m:d" o; do
  case "${o}" in
    p)
      p=1
      PATHMANAGER=${OPTARG}
      echo "PATHMANAGER="$PATHMANAGER
      ;;
    s)
      s=1
      SCHEDULER=${OPTARG}
      echo "SCHEDULER="$SCHEDULER
      ;;
    c)
      c=1
      CONGESTIONCONTROL=${OPTARG}
      echo "CONGESTIONCONTROL="${OPTARG}
      ;;
    g)
      g=1
      GW=${OPTARG}
      echo "GW=${GW}"
      ;;
    n)
      smf=1
      SMF_UE_SUBNET=${OPTARG}
      echo "SMF_UE_SUBNET="${SMF_UE_SUBNET}
      ;;
    u)
      u=1
      NUM_UES=${OPTARG}
      echo "NUM_UES="${NUM_UES}
      ;;
    f)
      f=1
      LAST_BYTE_FIRST_UE=${OPTARG}
      echo "LAST_BYTE_FIRST_UE="${LAST_BYTE_FIRST_UE}
      ;;
    m)
      ns=1
      MPTCPNS="MPTCPns"
      EXEC_MPTCPNS="sudo ip netns exec ${MPTCPNS}"
      echo "NAMESPACE=MPTCPns"
      ;;
    d)
      DEBUG=1
      echo "Include debug messages"
      ;;
    *)
      usage
      ;;
  esac
done
shift $((OPTIND-1))

if [ -z "${p}" ] || [ -z "${s}" ] || [ -z "${c}" ]; then
  usage
fi

##############################
# Environment configuration
##############################

# Check OS
if [ -f /etc/os-release ]; then
  # freedesktop.org and systemd
  . /etc/os-release
  OS=$NAME
  VER=$VERSION_ID
else
  # Fall back to uname, e.g. "Linux <version>", also works for BSD, etc.
  OS=$(uname -s)
  VER=$(uname -r)
  echo "This Linux version is too old: $OS:$VER, we don't support!"
  exit 1
fi

#sudo -v
#if [ $? == 1 ]
#then
# echo "Error: root permission is needed!"
# exit 1
#fi

GOPATH=$HOME/go
if [ $OS == "Ubuntu" ]; then
  GOROOT=/usr/local/go
elif [ $OS == "Fedora" ]; then
  GOROOT=/usr/lib/golang
fi
PATH=$PATH:$GOPATH/bin:$GOROOT/bin

##############################
# CONFIGURATION
##############################
#./configure.sh
if [[ $ns == 0 ]]; then
  sudo ifconfig eth0 down
  for i in $(seq 1 $NUM_UES)
  do
    card="eth"$i
    IPcard=$SMF_UE_SUBNET"."$(( LAST_BYTE_FIRST_UE+i-1 ))"/24"
    sudo ifconfig $card $IPcard
  done
fi

GlobalEth="eth1"
GlobalGW=$GW

##############################
# SETTING MPTCP PARAMETERS
##############################

# Show MPTCP version
if [[ $DEBUG == 1 ]]; then
  echo ""; echo "[INFO] Show version and configuration parameters"
  sudo dmesg | grep MPTCP
fi

# Modify tunable variables
sudo sysctl -w net.mptcp.mptcp_enabled=1     # Default 1
sudo sysctl -w net.mptcp.mptcp_checksum=1    # Default 1 (both sides have to be 0 in order to disable this)
sudo sysctl -w net.mptcp.mptcp_syn_retries=3 # Specifies how often we retransmit a SYN with the MP_CAPABLE-option. Default 3
sudo sysctl -w net.mptcp.mptcp_path_manager=$PATHMANAGER
sudo sysctl -w net.mptcp.mptcp_scheduler=$SCHEDULER

# Congestion control
sudo sysctl -w net.ipv4.tcp_congestion_control=$CONGESTIONCONTROL

# Configure each interface
for i in $(seq 1 $NUM_UES)
do
  card="eth"$i
  IPcard=$SMF_UE_SUBNET"."$(( LAST_BYTE_FIRST_UE+i-1 ))
  NETcard=$SMF_UE_SUBNET".0"
  netmaskcardbits=24
  GWcard=$GW
  NETcard=${NETcard}"/"${netmaskcardbits}
  if [[ $DEBUG == 1 ]]; then echo "[DEBUG] IPcard:   ${IPcard}"; fi
  if [[ $DEBUG == 1 ]]; then echo "[DEBUG] NETcard:  ${NETcard}"; fi
  if [[ $DEBUG == 1 ]]; then echo "[DEBUG] GWcard:   ${GWcard}"; fi

  sudo ip link set dev $card multipath on
done

# Disable interfaces for MPTCP (eth0 = NAT connection, eth$(( NUM_UES+1 )) = connection with host OS)
sudo ip link set dev eth0 multipath off
sudo ip link set dev eth$(( NUM_UES+1 )) multipath off

# Remove previous rules
for i in {32700..32765}; do sudo ip rule del pref $i 2>/dev/null ; done

# Configure each interface
for i in $(seq 1 $NUM_UES)
do
  card="eth"$i
  IPcard=$SMF_UE_SUBNET"."$(( LAST_BYTE_FIRST_UE+i-1 ))
  NETcard=$SMF_UE_SUBNET".0"
  GWcard=$GW
  # Create routing tables for each interface
  if [[ $DEBUG == 1 ]]; then
    sudo ip rule add from $IPcard table $i
    sudo ip route add $NETcard dev $card scope link table $i
    sudo ip route add default via $GWcard dev $card table $i
  else
    sudo ip rule add from $IPcard table $i 2> /dev/null
    sudo ip route add $NETcard dev $card scope link table $i 2> /dev/null
    sudo ip route add default via $GWcard dev $card table $i 2> /dev/null
  fi
done

# Default route
if [[ $DEBUG == 1 ]]; then
  sudo ip route add default scope global nexthop via $GlobalGW dev $GlobalEth
else
  sudo ip route add default scope global nexthop via $GlobalGW dev $GlobalEth 2> /dev/null
fi

##############################
# SHOWING ROUTING INFORMATION
##############################
if [[ $DEBUG == 1 ]]; then
  echo ""; echo "[INFO] Show rules"
  sudo ip rule show
  echo ""; echo "[INFO] Show routes"
  sudo ip route
  echo ""; echo "[INFO] Show routing table 1"
  sudo ip route show table 1
  echo ""; echo "[INFO] Show routing table 2"
  sudo ip route show table 2
fi
