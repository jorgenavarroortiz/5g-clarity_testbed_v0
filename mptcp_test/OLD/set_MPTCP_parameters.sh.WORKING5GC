#!/bin/bash
# Jorge Navarro, UGR (2020)

# This script assumes the following scenarios (please execute ./configure.sh first). Make sure that the hostname in /etc/hostname
# is a valid one: mptcpUe1, mptcpUe2, mptcpUe, free5gc or mptcpProxy
#
# Scenario 1: direct connection between two machines: mptcpUe1 <-> mptcpUe2
#   mptcpUe1 with eth0 disabled, eth1 10.1.1.1/24, eth2 10.1.2.1/24, eth3 for management
#   mptcpUe2 with eth0 disabled, eth1 10.1.2.1/24, eth2 10.2.2.1/24, eth3 for management
# NOTE: eth0 connects directly to Internet, used to install packages
#
# Scenario 2: mptcpUe <-> free5gc <-> mptcpProxy
#   mptcpUe with eth0 disabled, eth1 10.1.1.1/24, eth2 10.1.2.1/24, eth3 for management
#   free5gc with eth0 disabled, eth1 10.1.1.222/24, eth2 10.1.2.222/24, eth3 for management, eth4 60.60.0.102/24
#   mptcpProxy with eth0 disabled, eth1 60.60.0.101/24, eth2 for management

MACHINE=`hostname`
bGlobalGW=1

# CONFIGURATION
DEBUG=1

if [[ $bGlobalGW == 1 ]]; then
  if [[ $MACHINE == "mptcpUe" ]]; then
    GlobalEth="eth1"
    GlobalGW="10.1.1.222"
  elif [[ $MACHINE == "mptcpProxy" ]]; then
    GlobalEth="eth1"
    GlobalGW="60.60.0.102"
  else
    GlobalEth="eth0"
    GlobalGW=`route -n | grep ${GlobalEth} | grep 0.0.0.0 | awk '{ if ($1=="0.0.0.0") printf $2"\n";}' | head -n 1`
  fi
fi

if [[ $# -lt 3 ]]; then
  echo ""; echo "Syntax: $0 [<path manager> <scheduler> <congestion control> <eth2 state>]"
  echo "  E.g.: $0 fullmesh roundrobin olia backup";
  echo "        <path manager> ......... default, fullmesh, ndiffports, binder"
  echo "        <scheduler> ............ default, roundrobin, redundant"
  echo "        <congestion control> ... reno, cubic, lia, olia, wvegas, balia, mctcpdesync"
  echo "        <eth2 state> ........... on, off, backup"
  echo ""
  exit 0
fi

if [[ $# -ge 3 ]]; then
  PATHMANAGER=$1
  SCHEDULER=$2
  CONGESTIONCONTROL=$3
fi
if [[ $# -ge 4 ]]; then
  ETH2STATE=$4
fi

echo ""; 
if [[ $# -ge 4 ]]; then
  echo "Configuring ${MACHINE} with MPTCP... PM=${PATHMANAGER}, SCH=${SCHEDULER}, CC=${CONGESTIONCONTROL}, eth2 state=${ETH2STATE}"
else
  echo "Configuring ${MACHINE} with MPTCP... PM=${PATHMANAGER}, SCH=${SCHEDULER}, CC=${CONGESTIONCONTROL}"
fi

if [[ $bGlobalGW == 1 ]]; then
  if [[ $DEBUG -eq 1 ]]; then echo ""; echo "[DEBUG] GlobalGW: ${GlobalGW}"; fi
fi

# eth1 information
IPeth1=`ifconfig eth1 | grep inet | tr -s ' ' | cut -d' ' -f 3`
if [[ $DEBUG -eq 1 ]]; then echo "[DEBUG] IPeth1:   ${IPeth1}"; fi
netmasketh1bits=`ip -o -f inet addr show eth1 | tr -s ' ' | cut -d' ' -f 4 | cut -d'/' -f 2`
netmasketh1=`ifconfig eth1 | grep inet | tr -s ' ' | cut -d' ' -f 5`
IFS=. read -r i1 i2 i3 i4 <<< $IPeth1
IFS=. read -r m1 m2 m3 m4 <<< $netmasketh1
NETeth1=`printf "%d.%d.%d.%d\n" "$((i1 & m1))" "$((i2 & m2))" "$((i3 & m3))" "$((i4 & m4))"`
NETeth1=`echo ${NETeth1}/${netmasketh1bits}`
if [[ $DEBUG -eq 1 ]]; then echo "[DEBUG] NETeth1:  ${NETeth1}"; fi
if [[ $MACHINE == "mptcpUe" ]]; then
  GWeth1="10.1.1.222"
elif [[ $MACHINE == "mptcpProxy" ]]; then
  GWeth1="60.60.0.102"
else
  GWeth1=$IPeth1
fi
if [[ $DEBUG -eq 1 ]]; then echo "[DEBUG] GWeth1:   ${GWeth1}"; fi

if [[ $MACHINE == *"mptcpUe"* ]]; then
  # eth2 information
  IPeth2=`ifconfig eth2 | grep inet | tr -s ' ' | cut -d' ' -f 3`
  if [[ $DEBUG -eq 1 ]]; then echo "[DEBUG] IPeth2:   ${IPeth2}"; fi
  netmasketh2bits=`ip -o -f inet addr show eth2 | tr -s ' ' | cut -d' ' -f 4 | cut -d'/' -f 2`
  netmasketh2=`ifconfig eth2 | grep inet | tr -s ' ' | cut -d' ' -f 5`
  IFS=. read -r i1 i2 i3 i4 <<< $IPeth2
  IFS=. read -r m1 m2 m3 m4 <<< $netmasketh2
  NETeth2=`printf "%d.%d.%d.%d\n" "$((i1 & m1))" "$((i2 & m2))" "$((i3 & m3))" "$((i4 & m4))"`
  NETeth2=`echo ${NETeth2}/${netmasketh2bits}`
  if [[ $DEBUG -eq 1 ]]; then echo "[DEBUG] NETeth2:  ${NETeth2}"; fi
  if [[ $MACHINE == "mptcpUe" ]]; then
    GWeth2="10.1.2.222"
  else
    GWeth2=$IPeth2
  fi
  if [[ $DEBUG -eq 1 ]]; then echo "[DEBUG] GWeth2:   ${GWeth2}"; fi
fi

# Show MPTCP version
echo ""; echo "[INFO] Show version and configuration parameters"
sudo dmesg | grep MPTCP

# Disable interfaces for MPTCP (eth0 = NAT connection, eth3 = connection with host OS)
sudo ip link set dev eth0 multipath off
sudo ip link set dev eth3 multipath off

# Normal interface
sudo ip link set dev eth1 multipath on

# Backup interface
sudo ip link set dev eth2 multipath $ETH2STATE

# Modify tunable variables
sudo sysctl -w net.mptcp.mptcp_enabled=1     # Default 1
sudo sysctl -w net.mptcp.mptcp_checksum=1    # Default 1 (both sides have to be 0 in order to disable this)
sudo sysctl -w net.mptcp.mptcp_syn_retries=3 # Specifies how often we retransmit a SYN with the MP_CAPABLE-option. Default 3
sudo sysctl -w net.mptcp.mptcp_path_manager=$PATHMANAGER
sudo sysctl -w net.mptcp.mptcp_scheduler=$SCHEDULER

# Congestion control
sudo sysctl -w net.ipv4.tcp_congestion_control=$CONGESTIONCONTROL

# Remove previous rules
for i in {32700..32765}; do sudo ip rule del pref $i 2>/dev/null ; done
# Create routing tables for each interface
sudo ip rule add from $IPeth1 table 1 2> /dev/null
sudo ip route add $NETeth1 dev eth1 scope link table 1 2> /dev/null
sudo ip route add default via $GWeth1 dev eth1 table 1 2> /dev/null
if [[ $MACHINE == *"mptcpUe"* ]]; then
  sudo ip rule add from $IPeth2 table 2 2> /dev/null
  sudo ip route add $NETeth2 dev eth2 scope link table 2 2> /dev/null
  sudo ip route add default via $GWeth2 dev eth2 table 2 2> /dev/null
fi

# Default route for normal internet
if [[ bGlobalGW == 1 ]]; then
  sudo ip route add default scope global nexthop via $GlobalGW dev $GlobalEth 2> /dev/null
fi

# Show routing tables
echo ""; echo "[INFO] Show rules"
sudo ip rule show
echo ""; echo "[INFO] Show routes"
sudo ip route
echo ""; echo "[INFO] Show routing table 1"
sudo ip route show table 1
echo ""; echo "[INFO] Show routing table 2"
sudo ip route show table 2
